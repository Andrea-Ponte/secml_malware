import torch
import numpy as np
import os
from secml.testing import CUnitTest
from os import listdir

from secml_malware.models.c_classifier_pytorch_malconv import CClassifierMalConvPyTorch
from secml_malware.models.malconv import MalConv


class MalConvBaseTests(CUnitTest):
	def setUp(self):

		self.max_length = 2 ** 20
		self.padding_value = 256
		self.root_module_path = os.path.dirname(
			os.path.dirname(os.path.dirname(__file__))
		)
		self.classifier = CClassifierMalConvPyTorch()
		self.malconv_plus = CClassifierMalConvPyTorch(plus_version=True)
		self.surrogate_classifier = CClassifierMalConvPyTorch()
		self.ember_path = os.path.join(
			self.root_module_path, "secml_malware/data/trained/pretrained_malconv.pth"
		)
		self.surrogate_path = os.path.join(
			# self.root_module_path, "secml_malware/data/trained/trained_6k_malconv.pth"
			self.root_module_path, "secml_malware/data/trained/pretrained_malconv.pth"
		)
		self.malware_folder = os.path.join(
			self.root_module_path, "secml_malware/data/malware_samples/test_folder"
		)
		self.goodware_folder = os.path.join(
			self.root_module_path, "secml_malware/data/goodware_samples/"
		)
		self.single_malware_path = os.path.join(
			self.root_module_path, "secml_malware/data/malware_samples/test_malware"
		)
		self.baseline = np.array([np.zeros(self.max_length) + self.padding_value])
		X = []
		y = []
		for f in listdir(self.malware_folder):
			complete_path = os.path.join(self.malware_folder, f)
			if not os.path.isfile(complete_path):
				continue
			with open(complete_path, "rb") as malware:
				code = MalConv.bytes_to_numpy(malware.read(), self.max_length)
			X.append(code)
			y.append(1)
		X.append(self.baseline[0])
		y.append(0)
		self.X = torch.LongTensor(X)
		self.Y = y
		with open(self.single_malware_path, "rb") as f:
			self.byte_malware = bytearray(f.read())
		self.malware = np.array(
			[MalConv.bytes_to_numpy(self.byte_malware, self.max_length)]
		)
