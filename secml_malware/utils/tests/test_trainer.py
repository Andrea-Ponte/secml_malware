"""
.. module:: TrainerTestSuite
	:synopsis: unit testing for trainer object

.. moduleauthor:: Luca Demetrio <luca.demetrio@dibris.unige.it>
"""

import unittest
from secml_malware.models.malconv import MalConv
from secml_malware.models import CClassifierMalConvPyTorch
from secml_malware.utils.trainer import Trainer
from secml_malware.utils.exceptions import FolderNotExistsException
from secml.testing import CUnitTest
from secml.utils.c_file_manager import file_exist


class TrainerTestSuite(CUnitTest):
	def setUp(self):
		self.classes_dict_file = {
			0: " secml_malware/data/goodware_samples/",
			1: " secml_malware/data//malware_samples/",
		}
		self.accepted_signatures = ["PE32"]

	def test_no_classifier_raise_type_exception(self):
		fun = lambda f: MalConv.load_sample_from_file(f, 2 ** 20)
		self.assertRaises(
			TypeError,
			lambda: Trainer(
				CClassifierMalConvPyTorch(input_shape=(1, 2 ** 20)), fun, None
			),
		)

	def test_no_dictionary_raise_type_exception(self):
		fun = lambda f: MalConv.load_sample_from_file(f, 2 ** 20)
		self.assertRaises(TypeError, lambda: Trainer([], fun, self.classes_dict_file))

	def test_folder_not_exists_throws_exception(self):
		fun = lambda f: MalConv.load_sample_from_file(f, 2 ** 20)
		error_dict = {0: "no_folder"}
		self.assertRaises(
			FolderNotExistsException,
			lambda: Trainer(
				CClassifierMalConvPyTorch(input_shape=(1, 2 ** 20)), fun, error_dict
			),
		)

	def test_train_regular_malconv_classifier(self):
		max_length = 2 ** 5
		test_name = "normal_malconv"
		classifier = CClassifierMalConvPyTorch(
			input_shape=(1, max_length),
			train_transform=lambda x: MalConv.path_to_exe_vector(x, max_length),
		)
		trainer = Trainer(
			classifier,
			lambda f: MalConv.load_sample_from_file(f, max_length),
			self.classes_dict_file,
			accepted_signature=self.accepted_signatures,
		)
		dataset = trainer.create_dataset_path_no_transform(
			shape=True, limit_per_class=10, random_sample=True
		)
		output_model_path = "./{}.pth".format(test_name)
		trainer.train_regular_classifier(output_model_path, dataset=dataset)
		self.assertTrue(file_exist(output_model_path))

	def test_train_regular_malconv_classifier_no_crossvalidation(self):
		max_length = 2 ** 5
		test_name = "normal_malconv_all_data"
		classifier = CClassifierMalConvPyTorch(
			input_shape=(1, max_length),
			train_transform=lambda x: MalConv.path_to_exe_vector(x, max_length),
		)
		trainer = Trainer(
			classifier,
			lambda f: MalConv.load_sample_from_file(f, max_length),
			self.classes_dict_file,
			accepted_signature=self.accepted_signatures,
		)
		dataset = trainer.create_dataset_path_no_transform(
			shape=True, limit_per_class=10, random_sample=True
		)
		output_model_path = "./{}.pth".format(test_name)
		trainer.train_regular_classifier(
			output_model_path, dataset=dataset, n_fold=None
		)
		self.assertTrue(file_exist(output_model_path))

	def test_train_regular_malconv_plus_classifier_no_crossvalidation(self):
		max_length = 2 ** 5
		test_name = "malconv_plus_all_data"
		classifier = CClassifierMalConvPyTorch(
			input_shape=(1, max_length),
			plus_version=True,
			train_transform=lambda x: MalConv.path_to_exe_vector(x, max_length),
		)
		trainer = Trainer(
			classifier,
			lambda f: MalConv.load_sample_from_file(f, max_length),
			self.classes_dict_file,
		)
		dataset = trainer.create_dataset_path_no_transform(
			shape=True, limit_per_class=10, random_sample=True
		)
		output_model_path = "./{}.pth".format(test_name)
		trainer.train_regular_classifier(
			output_model_path, dataset=dataset, n_fold=None
		)
		self.assertTrue(file_exist(output_model_path))

	def test_train_regular_malconv_plus_classifier(self):
		max_length = 2 ** 5
		test_name = "malconv_plus"
		classifier = CClassifierMalConvPyTorch(
			input_shape=(1, max_length),
			plus_version=True,
			train_transform=lambda x: MalConv.path_to_exe_vector(x, max_length),
		)
		trainer = Trainer(
			classifier,
			lambda f: MalConv.load_sample_from_file(f, max_length),
			self.classes_dict_file,
		)
		dataset = trainer.create_dataset_path_no_transform(
			shape=True, limit_per_class=10, random_sample=True
		)
		output_model_path = "./{}.pth".format(test_name)
		trainer.train_regular_classifier(output_model_path, dataset=dataset)
		self.assertTrue(file_exist(output_model_path))


if __name__ == "__main__":
	unittest.main()
