"""
.. module:: MalConTestSuite
	:synopsis: MalConv basic unit tests

.. moduleauthor:: Luca Demetrio <luca.demetrio@dibris.unige.it>
"""

import unittest
import torch
from secml_malware import malconv
from secml_malware.utils.malconv_test_base import MalConvBaseTests
from secml.data import CDataset


class MalConvTestSuite(MalConvBaseTests):
	def setUp(self):
		super(MalConvTestSuite, self).setUp()
		self.m = malconv()

	def test_empty_baseline_is_good_ware(self):
		self.m.load_simplified_ember_model(self.ember_path)
		y_pred = self.m(torch.Tensor(self.baseline).long())
		if y_pred.is_cuda:
			y_pred = y_pred.cpu()
		y = int(y_pred.detach().numpy()[0][0] > 0.5)
		self.assertEqual(y, 0)

	def test_malconv_load_ember_no_path(self):
		self.classifier.load_pretrained_model()
		y = self.classifier.predict(
			torch.Tensor(self.baseline).long(), return_decision_function=False
		)
		self.assertEqual(y, 0)

	def test_empty_baseline_pytorch_classifier_wrapper(self):
		self.classifier.load_pretrained_model(self.ember_path)
		y = self.classifier.predict(
			torch.Tensor(self.baseline).long(), return_decision_function=False
		)
		self.assertEqual(y, 0)

	def test_positive_weights_training(self):
		inner_model = self.malconv_plus._model
		self.assertFalse((inner_model.embedding_1.weight >= 0).all())
		self.assertFalse((inner_model.conv1d_1.weight >= 0).all())
		self.assertFalse((inner_model.conv1d_2.weight >= 0).all())
		self.assertFalse((inner_model.dense_1.weight >= 0).all())
		self.assertFalse((inner_model.dense_2.weight >= 0).all())

		self.malconv_plus.fit(CDataset(self.X, self.Y))
		inner_model = self.malconv_plus._model

		self.assertTrue((inner_model.embedding_1.weight >= 0).all())
		self.assertTrue((inner_model.conv1d_1.weight >= 0).all())
		self.assertTrue((inner_model.conv1d_2.weight >= 0).all())
		self.assertTrue((inner_model.dense_1.weight >= 0).all())
		self.assertTrue((inner_model.dense_2.weight >= 0).all())

		self.assertTrue((inner_model.conv1d_1.bias <= 0).any())
		self.assertTrue((inner_model.conv1d_2.bias <= 0).any())
		self.assertTrue((inner_model.dense_1.bias <= 0).any())
		self.assertTrue((inner_model.dense_2.bias <= 0).any())


if __name__ == "__main__":
	unittest.main()
