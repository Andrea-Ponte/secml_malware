from abc import abstractmethod

from secml.ml.classifiers import CClassifier
from secml_malware.models import CClassifierEmber, CClassifierEnd2EndMalware


class CWrapperPhi():

	def __init__(self, model: CClassifier):
		self.classifier = model

	@abstractmethod
	def extract_features(self, x):
		raise NotImplementedError("This method is abstract, you should implement it somewhere else!")

	@abstractmethod
	def predict(self, x, return_decision_function=True):
		feature_vector = self.extract_features(x)
		return self.classifier.predict(feature_vector, return_decision_function=return_decision_function)


class CEmberWrapperPhi(CWrapperPhi):
	def extract_features(self, x):
		return (CClassifierEmber)(self.classifier).extract_features(x)


class CEnd2EndWrapperPhi(CWrapperPhi):
	def extract_features(self, x):
		x += self.classifier.get_is_shifting_values()
		return x
