"""
.. module:: CGammaAPIEvasionProblem
	:synopsis: Class performs black-box evasion attacks, applying Gamma on APIs.

.. moduleauthor:: Luca Demetrio <luca.demetrio@dibris.unige.it>

"""

import copy
import random
import string

import lief
from secml.array import CArray

from secml_malware.attack.blackbox.c_blackbox_problem import CBlackBoxProblem
from secml_malware.attack.blackbox.c_gamma_evasion import CGammaEvasionProblem
from secml_malware.attack.blackbox.c_wrapper_phi import CWrapperPhi


class CGammaSectionsEvasionProblem(CGammaEvasionProblem):

	def __init__(self,
				 section_population: list,
				 model_wrapper: CWrapperPhi,
				 population_size: int,
				 penalty_regularizer: float,
				 iterations: int,
				 seed: int = None,
				 is_debug: bool = False,
				 hard_label : bool = False,
				 threshold : float = 0.5,
				 loss : str = 'l1'
				 ):
		super(CGammaSectionsEvasionProblem, self).__init__(section_population,
														model_wrapper,
														population_size,
														penalty_regularizer,
														iterations,
														seed,
														is_debug,
														hard_label,
														threshold,
														loss)

	def apply_feasible_manipulations(self, t, x: CArray) -> CArray:
		x_adv = copy.deepcopy(x)
		x_adv = x_adv.tolist()
		lief_adv: lief.PE.Binary = lief.PE.parse(x_adv[0])
		for i in range(t.shape[-1]):
			content = self.section_population[i]
			content_to_append = content[:int(round(len(content) * t[i]))]
			s = lief.PE.Section(content_to_append, '.'+''.join(random.choice(string.ascii_lowercase) for _ in range(7)))
			lief_adv.add_section(s)
		builder = lief.PE.Builder(lief_adv)
		builder.build()
		x_adv = CArray(builder.get_build())
		x_adv = x_adv.reshape((1, x_adv.shape[-1]))
		return x_adv