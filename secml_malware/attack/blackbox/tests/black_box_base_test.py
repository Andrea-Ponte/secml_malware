import os
from os import listdir

import magic
from secml.array import CArray
from secml.testing import CUnitTest
from secml_malware.models import CClassifierEnd2EndMalware, MalConv, CClassifierEmber


class BlackBoxBaseTests(CUnitTest):
	def setUp(self):

		self.max_length = 2 ** 20
		self.padding_value = 256
		self.root_module_path = os.path.dirname(
			os.path.dirname(os.path.dirname(__file__))
		)
		self.end2end_classifier = CClassifierEnd2EndMalware(MalConv())
		self.end2end_classifier.load_pretrained_model()

		self.ember_classifier = CClassifierEmber()

		self.malware_folder = os.path.join(
			self.root_module_path, "secml_malware/data/malware_samples/test_folder"
		)
		self.goodware_folder = os.path.join(
			self.root_module_path, "secml_malware/data/goodware_samples/"
		)
		self.single_malware_path = os.path.join(
			self.root_module_path, "secml_malware/data/malware_samples/test_malware"
		)

		X_end2end = []
		X_ember = []
		y = []
		for f in listdir(self.malware_folder):
			complete_path = os.path.join(self.malware_folder, f)
			if not os.path.isfile(complete_path):
				continue
			if "PE32" not in magic.from_file(complete_path): continue
			with open(complete_path, "rb") as malware:
				print(f'>Using {f}')
				byte_malware = malware.read()
				code = MalConv.bytes_to_numpy(byte_malware, self.max_length, 256, False)
				X_ember.append(byte_malware)
			X_end2end.append(code)
			X_ember.append(byte_malware)
			y.append(1)
		self.X_end2end = CArray(X_end2end)
		self.X_ember = CArray(X_ember)
		self.Y = y
