from secml_malware.attack.blackbox.c_black_box_format_exploit_evasion import CBlackBoxFormatExploitEvasion
from secml_malware.attack.blackbox.c_wrapper_phi import CEmberWrapperPhi, CEnd2EndWrapperPhi
from secml_malware.attack.blackbox.tests.black_box_base_test import BlackBoxBaseTests


class BlackBoxEvasionAttackTestSuite(BlackBoxBaseTests):

	def test_blackbox_format_exploit_ember(self):
		black_box_attack = CBlackBoxFormatExploitEvasion(
			CEmberWrapperPhi(self.ember_classifier),
			preferable_extension_amount=0x200,
			pe_header_extension=0,
			iterations=1,
			random_init=True
		)
		y_pred, _, _, _ = black_box_attack.run(self.X_ember, self.Y)
		self.assert_evasion_result(y_pred)

	def test_blackbox_format_exploit_malconv(self):
		black_box_attack = CBlackBoxFormatExploitEvasion(
			CEnd2EndWrapperPhi(self.end2end_classifier),
			preferable_extension_amount=0x200,
			pe_header_extension=0,
			iterations=1,
			random_init=True
		)
		y_pred, _, _, _ = black_box_attack.run(self.X_ember, self.Y)
		self.assert_evasion_result(y_pred)

	def assert_evasion_result(self, y_pred):
		n_old_y_malw = sum(self.Y == 1)
		n_false_negative = sum(self.Y == 0)
		n_new_detected_malw = sum(y_pred == 1) - n_false_negative
		self.assertNotEqual(
			n_old_y_malw,
			n_new_detected_malw,
			msg="Evasion achieved: {}/{}".format(
				self.Y.shape[0] - n_new_detected_malw, self.Y.shape[0]
			),
		)