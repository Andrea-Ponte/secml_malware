import torch
from secml.array import CArray
from secml_malware.attack import CEnd2EndMalwareEvasion
from secml_malware.models import CClassifierEnd2EndMalware


class CFastGradientSignMethodEvasion(CEnd2EndMalwareEvasion):
	def __init__(
		self,
		end2end_model: CClassifierEnd2EndMalware,
		indexes_to_perturb: list,
		epsilon: float,
		iterations: int = 100,
		is_debug: bool = False,
		random_init: bool = False,
		threshold : float = 0.5,
		penalty_regularizer : float = 0,
	):
		super(CFastGradientSignMethodEvasion, self).__init__(
			end2end_model,
			indexes_to_perturb,
			iterations,
			is_debug,
			random_init,
			threshold,
			penalty_regularizer
		)
		self.epsilon = epsilon

	def compute_penalty_term(self, original_x: CArray, adv_x: CArray, par: float):
		penalty_term = torch.autograd.Variable([0])
		return penalty_term

	def loss_function_gradient(self, original_x : CArray, adv_x : CArray, penalty_term : torch.Tensor):
		y = self.classifier.embedding_predict(adv_x)
		g = torch.autograd.grad(y, adv_x)[0]
		g = torch.transpose(g, 1, 2)[0]
		return g