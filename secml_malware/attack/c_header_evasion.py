from secml_malware.attack import CEnd2EndMalwareEvasion


class CHeaderMalConvEvasion(CEnd2EndMalwareEvasion):
	"""Creates the attack that perturbs the header of a Windows PE malware.
	More details in the reference paper.
	"Explaining Vulnerabilities of Deep Learning to Adversarial Malware Binaries"
	https://arxiv.org/abs/1901.03583
	Demetrio, Biggio, Lagorio, Roli, Armando
	
	Arguments:
		CMalConvEvasion {[type]} -- [description]
	"""

	def __init__(
		self,
		end2end_model,
		how_many=len([i for i in range(2, 0x3C)]),
		index_to_perturb=[i for i in range(2, 0x3C)],
		iterations=1e2,
		is_debug=False,
		random_init=False,
		chunck_optimization=False,
		dos_optimization=False,
		conclude_iterations=False
	):
		"""Creates the evasion object

		Arguments:
			malconv {CClassifierMalConvPyTorch} -- The classifier to evade
			surrogate_data {CDataset} -- data used for the surrogate (if any)

		Keyword Arguments:
			how_many {int} -- How many index to perturb. None means use all indexes (default: {None})
			index_to_perturb {list of int} -- Indexes that will be used for the attack (default: [2, ..., 58])
			surrogate_classifier {CClassifierMalConvPyTorch} -- Surrogate classifier, if any (default: {None})
			use_surrogate {bool} -- Specify if should use the surrogate instead of real classifier (default: {False})
			iterations {float} -- How many iterations for the attack (default: {100.0})
			is_debug {bool} -- If true, it will print on console additional information duringthe attack (default: {False})
			random_init {bool} -- Randomize the bytes located at the specified indexes before starting the attack(default: {False})
		"""
		super(CHeaderMalConvEvasion, self).__init__(
			end2end_model,
			index_to_perturb,
			how_many,
			iterations,
			is_debug,
			random_init,
			chunck_optimization,
			dos_optimization,
			conclude_iterations
		)
